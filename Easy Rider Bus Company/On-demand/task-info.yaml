type: edu
files:
- name: easyrider/easyrider.py
  visible: true
  text: |-
    import json

    json_input1 = [
        {
            "bus_id": 128,
            "stop_id": 1,
            "stop_name": "Prospekt Avenue",
            "next_stop": 3,
            "stop_type": "S",
            "a_time": "08:12"
        },
        {
            "bus_id": 128,
            "stop_id": 3,
            "stop_name": "Elm Street",
            "next_stop": 5,
            "stop_type": "",
            "a_time": "08:11"
        },
        {
            "bus_id": 128,
            "stop_id": 5,
            "stop_name": "Fifth Avenue",
            "next_stop": 7,
            "stop_type": "O",
            "a_time": "08:20"
        },
        {
            "bus_id": 128,
            "stop_id": 7,
            "stop_name": "Sesame Street",
            "next_stop": 0,
            "stop_type": "F",
            "a_time": "08:27"
        },
        {
            "bus_id": 256,
            "stop_id": 2,
            "stop_name": "Pilotow Street",
            "next_stop": 3,
            "stop_type": "S",
            "a_time": "09:20"
        },
        {
            "bus_id": 256,
            "stop_id": 3,
            "stop_name": "Elm Street",
            "next_stop": 6,
            "stop_type": "",
            "a_time": "09:45"
        },
        {
            "bus_id": 256,
            "stop_id": 6,
            "stop_name": "Sunset Boulevard",
            "next_stop": 7,
            "stop_type": "",
            "a_time": "09:46"
        },
        {
            "bus_id": 256,
            "stop_id": 7,
            "stop_name": "Sesame Street",
            "next_stop": 0,
            "stop_type": "F",
            "a_time": "10:12"
        },
        {
            "bus_id": 512,
            "stop_id": 4,
            "stop_name": "Bourbon Street",
            "next_stop": 6,
            "stop_type": "S",
            "a_time": "08:13"
        },
        {
            "bus_id": 512,
            "stop_id": 6,
            "stop_name": "Sunset Boulevard",
            "next_stop": 0,
            "stop_type": "F",
            "a_time": "08:16"
        }
    ]

    json_input2 = [
        {
            "bus_id": 512,
            "stop_id": 4,
            "stop_name": "Bourbon Street",
            "next_stop": 6,
            "stop_type": "S",
            "a_time": "08:27"
        },
        {
            "bus_id": 512,
            "stop_id": 6,
            "stop_name": "Sunset Boulevard",
            "next_stop": 0,
            "stop_type": "F",
            "a_time": "08:37"
        }
    ]


    def control_dict(checking_list):
        """return dict with keys as bus id's"""
        list_of_bus_id = []
        for i in checking_list:
            list_of_bus_id.append(i['bus_id'])
        return {x: [] for x in set(sorted(list_of_bus_id))}


    def time_dict(checking_list):
        """return timetable with bus id and a list of tuples (stop_name, time)"""
        cd = control_dict(checking_list)
        for i in checking_list:
            cd[i["bus_id"]].append((i["stop_name"], i["a_time"],))
        return cd


    def is_ascending(time_list):
        """check if list with time is ascending and return time otherwise"""
        previous = time_list[0][1]
        for number in time_list:
            if number[1] < previous:
                return number
            previous = number[1]
        return 0


    def time_order_check(checking_list: "main list"):
        time_table = time_dict(checking_list)
        arrival_time_errors = {}
        for key, value in time_table.items():
            res_check = is_ascending(value)
            if not res_check:
                continue
            else:
                new_item = {key: res_check}
                arrival_time_errors.update(new_item)
        return arrival_time_errors


    def print_results(time_errors_dict: "bus_id: (stop_name, time)"):
        print("Arrival time test:")
        if not time_errors_dict:
            print("OK")
        else:
            for key, value in time_errors_dict.items():
                print(f"bus_id line {key}: wrong time on station {value[0]}")


    def main():
        bus_data = input()
        # bus_data = json.dumps(json_input2)
        data_deser = json.loads(bus_data)  # data deserialization from json
        # print(data_deser)
        error_dict = time_order_check(data_deser)
        print_results(error_dict)


    if __name__ == "__main__":
        main()
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: "from hstest.stage_test import *\nfrom hstest.test_case import TestCase\n\
    import re\n\n\nclass EasyRiderStage6(StageTest):\n    def generate(self) -> List[TestCase]:\n\
    \        return [\n\n            TestCase(stdin='[{\"bus_id\" : 128, \"stop_id\"\
    \ : 1, \"stop_name\" : \"Prospekt Avenue\", \"next_stop\" : 3, \"stop_type\" :\
    \ \"S\", \"a_time\" : \"08:12\"}, '\n                           '{\"bus_id\" :\
    \ 128, \"stop_id\" : 3, \"stop_name\" : \"Elm Street\", \"next_stop\" : 5, \"\
    stop_type\" : \"O\", \"a_time\" : \"08:19\"}, '\n                           '{\"\
    bus_id\" : 128, \"stop_id\" : 5, \"stop_name\" : \"Fifth Avenue\", \"next_stop\"\
    \ : 7, \"stop_type\" : \"O\", \"a_time\" : \"08:25\"}, '\n                   \
    \        '{\"bus_id\" : 128, \"stop_id\" : 7, \"stop_name\" : \"Sesame Street\"\
    , \"next_stop\" : 0, \"stop_type\" : \"F\", \"a_time\" : \"08:37\"}, '\n     \
    \                      '{\"bus_id\" : 256, \"stop_id\" : 2, \"stop_name\" : \"\
    Pilotow Street\", \"next_stop\" : 3, \"stop_type\" : \"S\", \"a_time\" : \"09:20\"\
    }, '\n                           '{\"bus_id\" : 256, \"stop_id\" : 3, \"stop_name\"\
    \ : \"Elm Street\", \"next_stop\" : 6, \"stop_type\" : \"\", \"a_time\" : \"09:45\"\
    }, '\n                           '{\"bus_id\" : 256, \"stop_id\" : 6, \"stop_name\"\
    \ : \"Abbey Road\", \"next_stop\" : 7, \"stop_type\" : \"O\", \"a_time\" : \"\
    09:59\"}, '\n                           '{\"bus_id\" : 256, \"stop_id\" : 7, \"\
    stop_name\" : \"Sesame Street\", \"next_stop\" : 0, \"stop_type\" : \"F\", \"\
    a_time\" : \"10:12\"}, '\n                           '{\"bus_id\" : 512, \"stop_id\"\
    \ : 4, \"stop_name\" : \"Bourbon Street\", \"next_stop\" : 6, \"stop_type\" :\
    \ \"S\", \"a_time\" : \"08:13\"}, '\n                           '{\"bus_id\" :\
    \ 512, \"stop_id\" : 6, \"stop_name\" : \"Abbey Road\", \"next_stop\" : 0, \"\
    stop_type\" : \"F\", \"a_time\" : \"08:16\"}]',\n                     attach=('Abbey\
    \ Road', 'Elm Street')),\n            TestCase(stdin='[{\"bus_id\" : 128, \"stop_id\"\
    \ : 1, \"stop_name\" : \"Fifth Avenue\", \"next_stop\" : 4, \"stop_type\" : \"\
    S\", \"a_time\" : \"08:12\"}, '\n                           '{\"bus_id\" : 128,\
    \ \"stop_id\" : 4, \"stop_name\" : \"Abbey Road\", \"next_stop\" : 5, \"stop_type\"\
    \ : \"\", \"a_time\" : \"08:19\"},  '\n                           '{\"bus_id\"\
    \ : 128, \"stop_id\" : 5, \"stop_name\" : \"Santa Monica Boulevard\", \"next_stop\"\
    \ : 8, \"stop_type\" : \"O\", \"a_time\" : \"08:25\"},  '\n                  \
    \         '{\"bus_id\" : 128, \"stop_id\" : 8, \"stop_name\" : \"Elm Street\"\
    , \"next_stop\" : 11, \"stop_type\" : \"\", \"a_time\" : \"08:37\"},  '\n    \
    \                       '{\"bus_id\" : 128, \"stop_id\" : 11, \"stop_name\" :\
    \ \"Beale Street\", \"next_stop\" : 12, \"stop_type\" : \"\", \"a_time\" : \"\
    09:20\"},  '\n                           '{\"bus_id\" : 128, \"stop_id\" : 12,\
    \ \"stop_name\" : \"Sesame Street\", \"next_stop\" : 14, \"stop_type\" : \"\"\
    , \"a_time\" : \"09:45\"},  '\n                           '{\"bus_id\" : 128,\
    \ \"stop_id\" : 14, \"stop_name\" : \"Bourbon Street\", \"next_stop\" : 19, \"\
    stop_type\" : \"O\", \"a_time\" : \"09:59\"},  '\n                           '{\"\
    bus_id\" : 128, \"stop_id\" : 19, \"stop_name\" : \"Prospekt Avenue\", \"next_stop\"\
    \ : 0, \"stop_type\" : \"F\", \"a_time\" : \"10:12\"},  '\n                  \
    \         '{\"bus_id\" : 256, \"stop_id\" : 2, \"stop_name\" : \"Pilotow Street\"\
    , \"next_stop\" : 3, \"stop_type\" : \"S\", \"a_time\" : \"08:13\"},  '\n    \
    \                       '{\"bus_id\" : 256, \"stop_id\" : 3, \"stop_name\" : \"\
    Startowa Street\", \"next_stop\" : 8, \"stop_type\" : \"\", \"a_time\" : \"08:16\"\
    },  '\n                           '{\"bus_id\" : 256, \"stop_id\" : 8, \"stop_name\"\
    \ : \"Elm Street\", \"next_stop\" : 10, \"stop_type\" : \"\", \"a_time\" : \"\
    08:29\"},  '\n                           '{\"bus_id\" : 256, \"stop_id\" : 10,\
    \ \"stop_name\" : \"Lombard Street\", \"next_stop\" : 12, \"stop_type\" : \"\"\
    , \"a_time\" : \"08:44\"},  '\n                           '{\"bus_id\" : 256,\
    \ \"stop_id\" : 12, \"stop_name\" : \"Sesame Street\", \"next_stop\" : 13, \"\
    stop_type\" : \"O\", \"a_time\" : \"08:46\"},  '\n                           '{\"\
    bus_id\" : 256, \"stop_id\" : 13, \"stop_name\" : \"Orchard Road\", \"next_stop\"\
    \ : 16, \"stop_type\" : \"\", \"a_time\" : \"09:13\"},  '\n                  \
    \         '{\"bus_id\" : 256, \"stop_id\" : 16, \"stop_name\" : \"Sunset Boulevard\"\
    , \"next_stop\" : 17, \"stop_type\" : \"O\", \"a_time\" : \"09:26\"},  '\n   \
    \                        '{\"bus_id\" : 256, \"stop_id\" : 17, \"stop_name\" :\
    \ \"Khao San Road\", \"next_stop\" : 20, \"stop_type\" : \"O\", \"a_time\" : \"\
    10:25\"},  '\n                           '{\"bus_id\" : 256, \"stop_id\" : 20,\
    \ \"stop_name\" : \"Michigan Avenue\", \"next_stop\" : 0, \"stop_type\" : \"F\"\
    , \"a_time\" : \"11:26\"},  '\n                           '{\"bus_id\" : 512,\
    \ \"stop_id\" : 6, \"stop_name\" : \"Arlington Road\", \"next_stop\" : 7, \"stop_type\"\
    \ : \"S\", \"a_time\" : \"11:06\"},  '\n                           '{\"bus_id\"\
    \ : 512, \"stop_id\" : 7, \"stop_name\" : \"Parizska Street\", \"next_stop\" :\
    \ 8, \"stop_type\" : \"\", \"a_time\" : \"11:15\"},  '\n                     \
    \      '{\"bus_id\" : 512, \"stop_id\" : 8, \"stop_name\" : \"Elm Street\", \"\
    next_stop\" : 9, \"stop_type\" : \"\", \"a_time\" : \"11:56\"},  '\n         \
    \                  '{\"bus_id\" : 512, \"stop_id\" : 9, \"stop_name\" : \"Niebajka\
    \ Avenue\", \"next_stop\" : 15, \"stop_type\" : \"\", \"a_time\" : \"12:20\"},\
    \  '\n                           '{\"bus_id\" : 512, \"stop_id\" : 15, \"stop_name\"\
    \ : \"Jakis Street\", \"next_stop\" : 16, \"stop_type\" : \"\", \"a_time\" : \"\
    12:44\"},  '\n                           '{\"bus_id\" : 512, \"stop_id\" : 16,\
    \ \"stop_name\" : \"Sunset Boulevard\", \"next_stop\" : 18, \"stop_type\" : \"\
    \", \"a_time\" : \"13:01\"},  '\n                           '{\"bus_id\" : 512,\
    \ \"stop_id\" : 18, \"stop_name\" : \"Jakas Avenue\", \"next_stop\" : 19, \"stop_type\"\
    \ : \"\", \"a_time\" : \"14:00\"},  '\n                           '{\"bus_id\"\
    \ : 1024, \"stop_id\" : 21, \"stop_name\" : \"Karlikowska Avenue\", \"next_stop\"\
    \ : 12, \"stop_type\" : \"S\", \"a_time\" : \"13:01\"},  '\n                 \
    \          '{\"bus_id\" : 1024, \"stop_id\" : 12, \"stop_name\" : \"Sesame Street\"\
    , \"next_stop\" : 0, \"stop_type\" : \"F\", \"a_time\" : \"14:00\"},  '\n    \
    \                       '{\"bus_id\" : 512, \"stop_id\" : 19, \"stop_name\" :\
    \ \"Prospekt Avenue\", \"next_stop\" : 0, \"stop_type\" : \"F\", \"a_time\" :\
    \ \"14:11\"}]',\n                     attach=('Sesame Street', 'Sunset Boulevard')),\n\
    \            TestCase(stdin='[{\"bus_id\" : 128, \"stop_id\" : 1, \"stop_name\"\
    \ : \"Prospekt Avenue\", \"next_stop\" : 3, \"stop_type\" : \"S\", \"a_time\"\
    \ : \"08:12\"}, '\n                           '{\"bus_id\" : 128, \"stop_id\"\
    \ : 3, \"stop_name\" : \"Elm Street\", \"next_stop\" : 5, \"stop_type\" : \"\"\
    , \"a_time\" : \"08:19\"}, '\n                           '{\"bus_id\" : 128, \"\
    stop_id\" : 5, \"stop_name\" : \"Fifth Avenue\", \"next_stop\" : 7, \"stop_type\"\
    \ : \"O\", \"a_time\" : \"08:25\"}, '\n                           '{\"bus_id\"\
    \ : 128, \"stop_id\" : 7, \"stop_name\" : \"Sesame Street\", \"next_stop\" : 0,\
    \ \"stop_type\" : \"F\", \"a_time\" : \"08:37\"}, '\n                        \
    \   '{\"bus_id\" : 256, \"stop_id\" : 2, \"stop_name\" : \"Pilotow Street\", \"\
    next_stop\" : 3, \"stop_type\" : \"S\", \"a_time\" : \"09:20\"}, '\n         \
    \                  '{\"bus_id\" : 256, \"stop_id\" : 3, \"stop_name\" : \"Elm\
    \ Street\", \"next_stop\" : 6, \"stop_type\" : \"\", \"a_time\" : \"09:45\"},\
    \ '\n                           '{\"bus_id\" : 256, \"stop_id\" : 6, \"stop_name\"\
    \ : \"Sunset Boulevard\", \"next_stop\" : 7, \"stop_type\" : \"\", \"a_time\"\
    \ : \"09:59\"}, '\n                           '{\"bus_id\" : 256, \"stop_id\"\
    \ : 7, \"stop_name\" : \"Sesame Street\", \"next_stop\" : 0, \"stop_type\" : \"\
    F\", \"a_time\" : \"10:12\"}, '\n                           '{\"bus_id\" : 512,\
    \ \"stop_id\" : 4, \"stop_name\" : \"Bourbon Street\", \"next_stop\" : 6, \"stop_type\"\
    \ : \"S\", \"a_time\" : \"08:13\"}, '\n                           '{\"bus_id\"\
    \ : 512, \"stop_id\" : 6, \"stop_name\" : \"Sunset Boulevard\", \"next_stop\"\
    \ : 0, \"stop_type\" : \"F\", \"a_time\" : \"08:16\"}]',\n                   \
    \  attach=\"OK\"),\n        ]\n\n    def check(self, reply: str, result) -> CheckResult:\n\
    \        if isinstance(result, str):\n            if result not in reply:\n  \
    \              return CheckResult.wrong(f\"Wrong number of bugs detected or the\
    \ output format is wrong. \"\n                                         \"Expected\
    \ output:\\n\\n\"\n                                         \"On demand stops\
    \ test:\\n\"\n                                         f\"Wrong stop type: {result}\"\
    )\n        else:\n            query = rf\"['{result[0]}[\\W]+{result[1]}']\"\n\
    \            if not re.search(rf'{query}', reply):\n                return CheckResult.wrong(f\"\
    Wrong number of bugs detected or the output format is wrong. \"\n            \
    \                             \"Expected output:\\n\\n\" \n                  \
    \                       \"On demand stops test:\\n\"\n                       \
    \                  f\"Wrong stop type: {list(result)}\")\n        return CheckResult.correct()\n\
    \n\nif __name__ == '__main__':\n    EasyRiderStage6('easyrider.easyrider').run_tests()\n"
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test.tests import EasyRiderStage6

    if __name__ == '__main__':
        EasyRiderStage6('easyrider.easyrider').run_tests()
  learner_created: false
- name: Optional_training/Request.http
  visible: true
  learner_created: true
- name: Optional_training/Examples.py
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/128/stages/685/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: "Sat, 03 Dec 2022 10:53:24 UTC"
record: 5
